// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AndiGanesha/authentication/service (interfaces: IAuthService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/AndiGanesha/authentication/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIAuthService) CreateUser(arg0 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIAuthServiceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIAuthService)(nil).CreateUser), arg0)
}

// GenerateToken mocks base method.
func (m *MockIAuthService) GenerateToken(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockIAuthServiceMockRecorder) GenerateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockIAuthService)(nil).GenerateToken), arg0, arg1)
}

// SetRedisToken mocks base method.
func (m *MockIAuthService) SetRedisToken(arg0 string, arg1 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRedisToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRedisToken indicates an expected call of SetRedisToken.
func (mr *MockIAuthServiceMockRecorder) SetRedisToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedisToken", reflect.TypeOf((*MockIAuthService)(nil).SetRedisToken), arg0, arg1)
}

// VerifyUserFromDB mocks base method.
func (m *MockIAuthService) VerifyUserFromDB(arg0 model.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserFromDB", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserFromDB indicates an expected call of VerifyUserFromDB.
func (mr *MockIAuthServiceMockRecorder) VerifyUserFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserFromDB", reflect.TypeOf((*MockIAuthService)(nil).VerifyUserFromDB), arg0)
}
